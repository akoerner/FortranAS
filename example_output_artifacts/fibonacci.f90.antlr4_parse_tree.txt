(program (executableProgram (programUnit (module (moduleStmt module (moduleName (ident fibonacci_module))) (moduleBody (moduleBody (moduleBody (specificationPartConstruct (implicitStmt implicit none))) (moduleSubprogramPartConstruct (containsStmt contains))) (moduleSubprogramPartConstruct (moduleSubprogram (functionSubprogram (functionPrefix (recursive recursive) function) (functionName fibonacci) (functionRange (functionParList ( (functionPars (functionPar (dummyArgName n))) )) result ( fib ) (body (bodyConstruct (specificationPartConstruct (declarationConstruct (typeDeclarationStmt (typeSpec integer) (attrSpecSeq , (attrSpec intent ( (intentSpec in) ))) :: (entityDeclList (entityDecl (objectName n))))))) (bodyConstruct (specificationPartConstruct (declarationConstruct (typeDeclarationStmt (typeSpec integer) :: (entityDeclList (entityDecl (objectName fib))))))) (bodyConstruct (executableConstruct (ifConstruct (ifThenStmt if ( (expression (level5Expr (equivOperand (orOperand (andOperand (level4Expr (level3Expr (level2Expr (addOperand (multOperand (level1Expr (primary (nameDataRef n))))))) (relOp <) (level3Expr (level2Expr (addOperand (multOperand (level1Expr (primary (unsignedArithmeticConstant 2))))))))))))) ) then) (conditionalBody (executionPartConstruct (executableConstruct (actionStmt (assignmentStmt fib = (expression (level5Expr (equivOperand (orOperand (andOperand (level4Expr (level3Expr (level2Expr (addOperand (multOperand (level1Expr (primary (nameDataRef n)))))))))))))))))) (elseConstruct (elseStmt else) (conditionalBody (executionPartConstruct (executableConstruct (actionStmt (assignmentStmt fib = (expression (level5Expr (equivOperand (orOperand (andOperand (level4Expr (level3Expr (level2Expr (addOperand (multOperand (level1Expr (primary (nameDataRef fibonacci (complexDataRefTail (sectionSubscriptRef ( (sectionSubscriptList (sectionSubscript (expression (level5Expr (equivOperand (orOperand (andOperand (level4Expr (level3Expr (level2Expr (addOperand (multOperand (level1Expr (primary (nameDataRef n))))) - (addOperand (multOperand (level1Expr (primary (unsignedArithmeticConstant 1))))))))))))))) )))))))) + (addOperand (multOperand (level1Expr (primary (nameDataRef fibonacci (complexDataRefTail (sectionSubscriptRef ( (sectionSubscriptList (sectionSubscript (expression (level5Expr (equivOperand (orOperand (andOperand (level4Expr (level3Expr (level2Expr (addOperand (multOperand (level1Expr (primary (nameDataRef n))))) - (addOperand (multOperand (level1Expr (primary (unsignedArithmeticConstant 2))))))))))))))) )))))))))))))))))))))) (endIfStmt endif))))) (endFunctionStmt end function fibonacci)))))) (endModuleStmt end module fibonacci_module)))) <EOF>)